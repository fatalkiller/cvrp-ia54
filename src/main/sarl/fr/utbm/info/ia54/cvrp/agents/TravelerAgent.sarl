package fr.utbm.info.ia54.cvrp.agents

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.ArrayList
import java.util.HashSet
import java.util.List
import java.util.Random
import java.util.Set
import fr.utbm.info.ia54.cvrp.model.Environment
import fr.utbm.info.ia54.cvrp.model.Metrics
import fr.utbm.info.ia54.cvrp.model.City
import fr.utbm.info.ia54.cvrp.model.Road

/** 
 * @author ma-pe
 * 
 */
// See main
@SuppressWarnings("potential_inefficient_value_conversion", "potential_field_synchronization_problem")
agent TravelerAgent {
	var env : Environment;
	var met : Metrics;
	var startingCity : City;
	var currentCity : City;
	var visitedCities : Set<City>;
	var travelledRoads : List<Road>;
	var travelTime : Float;
	var isDebugMode : Boolean;
	var type : String;
	var charge : Long;
	var maxCharge : Long;
	var pheromoneInfluence : Float;
	var distanceInfluence : Float;

	uses Logging, Lifecycle, DefaultContextInteractions

	on Initialize {
		env = occurrence.parameters.get(0) as Environment;
		met = occurrence.parameters.get(1) as Metrics;

		startingCity = occurrence.parameters.get(2) as City;
		type = occurrence.parameters.get(3) as String;
		pheromoneInfluence = occurrence.parameters.get(4) as Float;
		distanceInfluence = occurrence.parameters.get(5) as Float;
		isDebugMode = occurrence.parameters.get(6) as Boolean;

		currentCity = startingCity;
		charge = new Long(0);
		maxCharge = currentCity.getCapacity();
		visitedCities = new HashSet<City>();
		visitedCities.add(startingCity);
		travelledRoads = new ArrayList<Road>();
		travelTime = new Float(0);

		loggingName = "Traveler Agent - Round " + met.roundsElapsed + " - Starting city " + startingCity.name;

		if (isDebugMode) {
			info("Traveler agent spawned !");
		}

		travel();
	}

	def travel() : void {
		var road : Road = null;
		while ((visitedCities.size() != env.cities.size()) || currentCity != startingCity) {
			if (type.equals("CVRP")) {
				if (charge + currentCity.getCapacity() >= 0 &&
					(!visitedCities.contains(currentCity) || currentCity === startingCity)) {
					charge = Math.min(charge + currentCity.getCapacity(), maxCharge);
					visitedCities.add(currentCity);
				}
			}
			// pick a road
			// Thats the most complex thing so Ill put it in another function
			road = pickRoad();

			// add traveltime
			travelTime = travelTime + road.timeTaken;

			// add to travelledroads and visitedcities (Dont need to worry about which one it is since this is a set)
			travelledRoads.add(road);
			if (type.equals("TSP")) {
				visitedCities.addAll(road.getCities());
			}

			// change location
			currentCity = road.travel(currentCity);
		}
		emit(new TravelsFinished(travelledRoads, travelTime))
		killMe;
	}

	// Maybe use SARL to build several road picking skills to test different methods of optimization
	// Maybe double check if all cities are connected if ever using custom maps ?
	def pickRoad() : Road {

		var chosenRoad : Road = null;
		var availableRoads : List<Road> = new ArrayList<Road>();
		var totalWeights = 0f;
		var rng : Float = new Random().nextFloat();
		var cumulativeProb = 0f;

		availableRoads = env.getAdjacentRoads(currentCity);
		removeRoadsToPreviouslyVisitedCitiesAndCitiesWeCantDeliver(availableRoads);

		for (road : availableRoads) {
			totalWeights += new Float(Math.pow(road.weight, pheromoneInfluence) * Math.pow(1 / road.timeTaken, distanceInfluence));
		}

		for (road : availableRoads) {
			if (chosenRoad === null) {
				cumulativeProb += new Float(Math.pow(road.weight, pheromoneInfluence) * Math.pow(1 / road.timeTaken, distanceInfluence) /
						totalWeights);
				if (rng < cumulativeProb) {
					chosenRoad = road;
				}
			}
		}

		// To correct issues when I was unable to pick a road, just pick a random one
		if (chosenRoad === null) {
			info(totalWeights) // Gets big too soon, becoming infinity and a problem
			info(cumulativeProb) // Gets to 0 since total goes to infinity
			info("Was unable to pick a road, picking a random road instead.")
			chosenRoad = availableRoads.get(new Random().nextInt(availableRoads.size()));
		}
		return chosenRoad;
	}

	// Assuming all cities are interconnected, we can remove roads linking to previously visited cities
	// Unless the previously visited city is the depot
	def removeRoadsToPreviouslyVisitedCitiesAndCitiesWeCantDeliver(roads : List<Road>) : void {
		var i : int = 0;
		while (i < roads.size()) {
			if (roads.get(i).travel(currentCity) !== startingCity && (
				visitedCities.contains(roads.get(i).travel(currentCity)) ||
				roads.get(i).travel(currentCity).getCapacity() + charge < 0 ))
			{
				roads.remove(roads.get(i))
			}
			else 
			{
				i++
			}
		}
	}

	on ExitApplicationEvent {
		killMe;
	}

	on Destroy {
		if (isDebugMode) {
			info("The traveler agent was stopped.")
		}
	}
}
