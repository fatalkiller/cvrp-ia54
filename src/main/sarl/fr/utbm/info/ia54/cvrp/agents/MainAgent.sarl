package fr.utbm.info.ia54.cvrp.agents

import io.sarl.core.AgentTask
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.List
import fr.utbm.info.ia54.cvrp.model.Environment
import fr.utbm.info.ia54.cvrp.model.Metrics
import fr.utbm.info.ia54.cvrp.model.Road
import fr.utbm.info.ia54.cvrp.view.SimulationWindow
import fr.utbm.info.ia54.cvrp.model.SimuParameters

// Don't write over occurrences
// Handle synchronization issues with synchronized() when needed
@SuppressWarnings("discouraged_occurrence_readonly_use", "potential_field_synchronization_problem")
agent MainAgent {

	var env : Environment; // Stores the position of the objects in the simulation
	var disp : SimulationWindow; // Handles the view
	var met : Metrics; // Stores information on the simulation
	// Launching options
	var type : String
	var map : String
	var isDebugMode : Boolean

	uses Logging, Lifecycle, Schedules

	// I'm importing a String, toString is not inefficient
	@SuppressWarnings("potential_inefficient_value_conversion")
	on Initialize {
		loggingName = "Main Agent"
		info("Main agent spawned !");
		// Retrieve passed parameters like so
		type = occurrence.parameters.get(0) as String;
		map = occurrence.parameters.get(1) as String;
		isDebugMode = occurrence.parameters.get(2) as Boolean;
		env = occurrence.parameters.get(3) as Environment;
		met = occurrence.parameters.get(4) as Metrics;
		disp = occurrence.parameters.get(5) as SimulationWindow;

		// I guess we just want the visuals to update and we want the agents to update ASAP and not wait for next frame
		// So Im making 2 loops, altho agents arent as much a loop as they are a nonstop exchange
		displayLoop();

		info("Starting to loop...")
		startAgents();
	}

	def displayLoop() : void {
		var framerate : int = 60;
		val taskMain : AgentTask = task("Main Loop")
		// Stuff to do every frame :
		taskMain.every(1000 / framerate) [
			disp.refreshSimulationFrame();
		]
	}

	// Starts a new round
	def startAgents() : void {
		if (type.equals("TSP")) {
			for (startCity : env.getCities()) {
				met.increaseActiveAgents();
				spawn(TravelerAgent, env, met, startCity, type, isDebugMode);
			}
		}
		if (type.equals("CVRP")) {
			var i : Integer;
			for (i = 0; i < SimuParameters.agentNumber; i++) {
				met.increaseActiveAgents();
				spawn(TravelerAgent, env, met, env.getCities().get(0), type, isDebugMode);
			}
		}
	}

	// Records the result of a finished agent
	on TravelsFinished {
		met.decreaseActiveAgents();
		var pathTaken : List<Road> = occurrence.pathTaken;
		var timeTaken : Float = occurrence.timeTaken;
		if (met.fastestTime.equals("TBD") || timeTaken < met.fastestTime.floatValue) {
			if (isDebugMode) {
				info("new record!")
			}

			met.fastestTime = timeTaken.toString();
			met.formattedFastestPath = pathTaken;
		}

		for (road : pathTaken) {
			road.increaseFutureWeight(timeTaken);
		}

		// Updates weights & starts a new round
		// We assume by the time an agent gets there, more have been spawned if planned
		if (met.activeAgents == 0) {
			met.increaseElapsedRounds();
			env.updateWeights();
			if (isDebugMode) {
				info("New round")
			}
			startAgents();
		}
	}

	on ExitApplicationEvent {
		killMe;
	}

	on Destroy {
		info("The main agent has stopped.")
	}
}
